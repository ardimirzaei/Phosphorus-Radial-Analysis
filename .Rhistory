setwd("D:/People/Bryson/PhosphateAnalysis")
library(corrplot)
library(ggplot2)
library(dplyr)
library(psych) # for describeby
library(car) #for leven's test
library(flextable)
# devtools::install_github("davidgohel/officedown")
library(officedown)
source('Scripts/Phos_Load_and_Preprocess.R')
source('Scripts/Phos_Alpha_vs_RMSD.R')
df_cut %>%
mutate(n1 = df$n.1.) %>%
mutate(n2 = df$n.2.) %>%
mutate(n3 = df$n.3.) %>%
mutate(n4 = df$n.4.) %>%
group_by(nl) %>%
summarise(count = n(), mean = mean(RMSD_MAP), min = min(RMSD_MAP), max = max(RMSD_MAP)) %>%
arrange(mean)
df_cut <- df[c("N", "Rf.map...", "alphavalue", "ATOM","KAPPA", "KAPPA_HAT","RMSD_MAP")]
df_cut$nl <-
apply(df[c("n.1.", "n.2.", "n.3.", "n.4.")], 1, paste,collapse="")
df_cut %>%
mutate(n1 = df$n.1.) %>%
mutate(n2 = df$n.2.) %>%
mutate(n3 = df$n.3.) %>%
mutate(n4 = df$n.4.) %>%
group_by(nl) %>%
summarise(count = n(), mean = mean(RMSD_MAP), min = min(RMSD_MAP), max = max(RMSD_MAP)) %>%
arrange(mean)
df_cut <- df[c("N", "Rf.map", "alphavalue", "ATOM","KAPPA", "KAPPA_HAT","RMSD_MAP")]
df_cut$nl <-
apply(df[c("n.1.", "n.2.", "n.3.", "n.4.")], 1, paste,collapse="")
df_cut %>%
mutate(n1 = df$n.1.) %>%
mutate(n2 = df$n.2.) %>%
mutate(n3 = df$n.3.) %>%
mutate(n4 = df$n.4.) %>%
group_by(nl) %>%
summarise(count = n(), mean = mean(RMSD_MAP), min = min(RMSD_MAP), max = max(RMSD_MAP)) %>%
arrange(mean)
chr_loc = 3
g <- df_cut %>%
group_by(nl) %>%
summarise(count = n(), mean = mean(RMSD_MAP), min = min(RMSD_MAP), max = max(RMSD_MAP)) %>%
arrange(mean) %>%
mutate(nl = fct_relevel(as.factor(.$nl), .$nl)) %>%
mutate(n_n = as.integer(substr(as.character(nl),chr_loc,chr_loc))) %>%
mutate(n1 = as.integer(substr(as.character(nl),1,1))) %>%
mutate(n2 = as.integer(substr(as.character(nl),2,2))) %>%
mutate(n3 = as.integer(substr(as.character(nl),3,3))) %>%
mutate(n4 = as.integer(substr(as.character(nl),4,4))) %>%
dplyr::slice(1:100) %>%
ggplot(aes(x=nl)) +
geom_point(aes(y = mean*1.01, color = as.factor(n1))) +
geom_point(aes(y = mean*1.02, color = as.factor(n2))) +
geom_point(aes(y = mean*1.03, color = as.factor(n3))) +
geom_point(aes(y = mean*1.04, color = as.factor(n4))) +
# stat_smooth(aes(x = 1:300,y = min), size=1.5, method = "loess", level = 0.95, fullrange = TRUE, se = FALSE,  color = 'royalblue', alpha = 0.2)+
# stat_smooth(aes(x = 1:300,y = max), size=1.5, method = "loess", level = 0.95, fullrange = TRUE, se = FALSE,  color = 'royalblue', alpha = 0.2)+
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
df_cut %>%
mutate(n1 = df$n.1.) %>%
mutate(n2 = df$n.2.) %>%
mutate(n3 = df$n.3.) %>%
mutate(n4 = df$n.4.) %>%
group_by(nl) %>%
summarise(count = n(), mean = median(RMSD_MAP), min = min(RMSD_MAP), max = max(RMSD_MAP)) %>%
arrange(mean)
df_cut %>%
group_by(nl) %>%
summarise(count = n(), mean = mean(RMSD_MAP), min = min(RMSD_MAP), max = max(RMSD_MAP)) %>%
arrange(mean) %>%
mutate(nl = fct_relevel(as.factor(.$nl), .$nl)) %>%
mutate(n_n = as.integer(substr(as.character(nl),chr_loc,chr_loc))) %>%
mutate(n1 = as.integer(substr(as.character(nl),1,1))) %>%
mutate(n2 = as.integer(substr(as.character(nl),2,2))) %>%
mutate(n3 = as.integer(substr(as.character(nl),3,3))) %>%
mutate(n4 = as.integer(substr(as.character(nl),4,4))) %>%
dplyr::slice(1:100)
library(dplyr)
df_cut %>%
group_by(nl) %>%
summarise(count = n(), mean = mean(RMSD_MAP), min = min(RMSD_MAP), max = max(RMSD_MAP)) %>%
arrange(mean) %>%
mutate(nl = fct_relevel(as.factor(.$nl), .$nl)) %>%
mutate(n_n = as.integer(substr(as.character(nl),chr_loc,chr_loc))) %>%
mutate(n1 = as.integer(substr(as.character(nl),1,1))) %>%
mutate(n2 = as.integer(substr(as.character(nl),2,2))) %>%
mutate(n3 = as.integer(substr(as.character(nl),3,3))) %>%
mutate(n4 = as.integer(substr(as.character(nl),4,4))) %>%
dplyr::slice(1:100) %>%
ggplot(aes(x=nl)) +
geom_point(aes(y = mean*1.01, color = as.factor(n1))) +
geom_point(aes(y = mean*1.02, color = as.factor(n2))) +
geom_point(aes(y = mean*1.03, color = as.factor(n3))) +
geom_point(aes(y = mean*1.04, color = as.factor(n4))) +
# stat_smooth(aes(x = 1:300,y = min), size=1.5, method = "loess", level = 0.95, fullrange = TRUE, se = FALSE,  color = 'royalblue', alpha = 0.2)+
# stat_smooth(aes(x = 1:300,y = max), size=1.5, method = "loess", level = 0.95, fullrange = TRUE, se = FALSE,  color = 'royalblue', alpha = 0.2)+
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
library(dplyr)
