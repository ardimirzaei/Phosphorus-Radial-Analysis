Sys.getenv("RSTUDIO_PANDOC")
setwd("D:/People/Bryson/PhosphateAnalysis")
library(corrplot)
library(ggplot2)
library(dplyr)
library(psych) # for describeby
library(car) #for leven's test
library(flextable)
# devtools::install_github("davidgohel/officedown")
library(officedown)
source('Scripts/Phos_Load_and_Preprocess.R')
source('Scripts/Phos_Alpha_vs_RMSD.R')
g <- ggplot(df,aes(y=RMSD_MAP, x=as.factor(alphavalue), fill=as.factor(alphavalue)))+
stat_summary(fun="mean", geom="bar",position="dodge")+
stat_summary(fun.data = mean_se, geom = "errorbar", position="dodge",width=.8) +
coord_cartesian(ylim = c(0.0382,0.40434)) +
xlab("Alpha Value") +
ylab("RMSD MAP") +
theme_minimal() +
theme(legend.position = "none")
g
g <- ggplot(df,aes(y=RMSD_MAP, x=as.factor(alphavalue), fill=as.factor(alphavalue)))+
stat_summary(fun="mean", geom="bar",position="dodge")+
stat_summary(fun.data = mean_se, geom = "errorbar", position="dodge",width=.8) +
coord_cartesian(ylim = c(0.0382,01.40434)) +
xlab("Alpha Value") +
ylab("RMSD MAP") +
theme_minimal() +
theme(legend.position = "none")
g
ggplot(df,aes(y=RMSD_MAP, x=as.factor(alphavalue), fill=as.factor(alphavalue)))+
stat_summary(fun="mean", geom="bar",position="dodge")+
stat_summary(fun.data = mean_se, geom = "errorbar", position="dodge",width=.8) +
# coord_cartesian(ylim = c(0.0382,01.40434)) +
xlab("Alpha Value") +
ylab("RMSD MAP") +
theme_minimal() +
theme(legend.position = "none")
ggsave(paste0("RMSDMAP_v_Alpha",format(Sys.time(), '%Y%m%d'),".pdf"),
df
df
df$RMSD_MAPm
df$RMSD_MAP
summary(df$RMSD_MAP)
# Filtering for P atom from here.
source('Scripts/Phos_Load_and_Preprocess.R')
# Filtering for P atom from here.
source('Scripts/Phos_Load_and_Preprocess.R')
# Filtering for P atom from here.
source('Scripts/Phos_Load_and_Preprocess.R')
gsub("DataFiles\\","",df$drug)
gsub("DataFiles\\","",df$drug)
gsub("DataFiles","",df$drug)
gsub("DataFiles\\\\","",df$drug)
# Filtering for P atom from here.
source('Scripts/Phos_Load_and_Preprocess.R')
df$drug <- gsub("DataFiles\\\\","",df$drug)
unqiue(df$drug)
unique(df$drug)
gsub("DataFiles\/","",df$drug)
gsub("DataFiles\\/","",df$drug)
# Filtering for P atom from here.
source('Scripts/Phos_Load_and_Preprocess.R')
unique(df$drug)
# Filtering for P atom from here.
source('Scripts/Phos_Load_and_Preprocess.R')
unique(df$drug)
source('Scripts/Phos_Alpha_vs_RMSD.R')
g
df
corrplot(as.matrix(M),
p.mat = as.matrix(testP),
number.digits = 3,
sig.level = 0.05,
method = 'circle',
insig='blank',
addCoef.col ='black',
tl.col = "black",
number.cex = 1.8,
cl.pos = 'n',
tl.srt = 25,
tl.cex = 1.2,
tl.offset = 1,
mar=c(0,0,4,0))
ggplot(df,aes(y=RMSD_MAP, x=as.factor(alphavalue), fill=as.factor(alphavalue)))+
stat_summary(fun="mean", geom="bar",position="dodge")+
stat_summary(fun.data = mean_se, geom = "errorbar", position="dodge",width=.8) +
# coord_cartesian(ylim = c(0.0382,01.40434)) +
xlab("Alpha Value") +
ylab("RMSD MAP") +
theme_minimal() +
theme(legend.position = "none")
ggplot(df,aes(y=KAPPA_HAT, x=as.factor(alphavalue), fill=as.factor(alphavalue)))+
stat_summary(fun="mean", geom="bar",position="dodge")+
stat_summary(fun.data = mean_se, geom = "errorbar", position="dodge",width=.8) +
coord_cartesian(ylim = c(1.06,1.09)) +
xlab("Alpha Value") +
theme_minimal() +
ylab("Kappa Hat Value") +
theme(legend.position = "none")
ggplot(df,aes(y=KAPPA_HAT, x=as.factor(alphavalue), fill=as.factor(alphavalue)))+
stat_summary(fun="mean", geom="bar",position="dodge")+
stat_summary(fun.data = mean_se, geom = "errorbar", position="dodge",width=.8) +
# coord_cartesian(ylim = c(1.06,1.09)) +
xlab("Alpha Value") +
theme_minimal() +
ylab("Kappa Hat Value") +
theme(legend.position = "none")
ggplot(df,aes(y=KAPPA_HAT, x=as.factor(alphavalue), fill=as.factor(alphavalue)))+
stat_summary(fun="mean", geom="bar",position="dodge")+
stat_summary(fun.data = mean_se, geom = "errorbar", position="dodge",width=.8) +
coord_cartesian(ylim = c(0.96,1.09)) +
xlab("Alpha Value") +
theme_minimal() +
ylab("Kappa Hat Value") +
theme(legend.position = "none")
ggplot(df,aes(y=KAPPA_HAT, x=as.factor(alphavalue), fill=as.factor(alphavalue)))+
stat_summary(fun="mean", geom="bar",position="dodge")+
stat_summary(fun.data = mean_se, geom = "errorbar", position="dodge",width=.8) +
coord_cartesian(ylim = c(0.90,0.95)) +
xlab("Alpha Value") +
theme_minimal() +
ylab("Kappa Hat Value") +
theme(legend.position = "none")
ggplot(df,aes(y=KAPPA_HAT, x=as.factor(alphavalue), fill=as.factor(alphavalue)))+
stat_summary(fun="mean", geom="bar",position="dodge")+
stat_summary(fun.data = mean_se, geom = "errorbar", position="dodge",width=.8) +
coord_cartesian(ylim = c(0.85,0.96)) +
xlab("Alpha Value") +
theme_minimal() +
ylab("Kappa Hat Value") +
theme(legend.position = "none")
ggplot(df,aes(y=KAPPA_HAT, x=as.factor(alphavalue), fill=as.factor(alphavalue)))+
stat_summary(fun="mean", geom="bar",position="dodge")+
stat_summary(fun.data = mean_se, geom = "errorbar", position="dodge",width=.8) +
coord_cartesian(ylim = c(0.85,1)) +
xlab("Alpha Value") +
theme_minimal() +
ylab("Kappa Hat Value") +
theme(legend.position = "none")
ggplot(df,aes(y=KAPPA_HAT, x=as.factor(alphavalue), fill=as.factor(alphavalue)))+
stat_summary(fun="mean", geom="bar",position="dodge")+
stat_summary(fun.data = mean_se, geom = "errorbar", position="dodge",width=.8) +
coord_cartesian(ylim = c(0.88,1.0)) +
xlab("Alpha Value") +
theme_minimal() +
ylab("Kappa Hat Value") +
theme(legend.position = "none")
ggplot(df,aes(y=KAPPA_HAT, x=as.factor(alphavalue), fill=as.factor(alphavalue)))+
stat_summary(fun="mean", geom="bar",position="dodge")+
stat_summary(fun.data = mean_se, geom = "errorbar", position="dodge",width=.8) +
coord_cartesian(ylim = c(0.88,0.98)) +
xlab("Alpha Value") +
theme_minimal() +
ylab("Kappa Hat Value") +
theme(legend.position = "none")
ggplot(df,aes(y=RMSD_MAP, x=as.factor(alphavalue), fill=as.factor(alphavalue)))+
stat_summary(fun="mean", geom="bar",position="dodge")+
stat_summary(fun.data = mean_se, geom = "errorbar", position="dodge",width=.8) +
# coord_cartesian(ylim = c(0.0382,01.40434)) +
xlab("Alpha Value") +
ylab("RMSD MAP") +
theme_minimal() +
theme(legend.position = "none")
df
View(df)
df %>% filter(nl ==6677)
df %>% filter(nl ==6677) %>% quantile()
df %>% filter(nl ==6677) %>% quantile(RMSD_MAP)
df %>% filter(nl ==6677) %>% select(RMSD_MAP)
rmarkdown::render(input = 'Scripts/Phos_Top5Bottom5_Tables.rmd',
output_file = paste0('TopAndBottom_Tables_',format(Sys.time(), '%Y%m%d'),'.docx'),
output_dir = 'Analysis/')
library(dplyr)
library(flextable)
df %>%
mutate(nl =   apply(df[c("n.1.", "n.2.", "n.3.", "n.4.")], 1, paste,collapse="")) %>%
filter(ATOM == 'P') %>%
group_by(drug, compound, alphavalue) %>%
arrange(RMSD_MAP) %>%
slice((n()-5):n())
df %>%
mutate(nl =   apply(df[c("n.1.", "n.2.", "n.3.", "n.4.")], 1, paste,collapse="")) %>%
filter(ATOM == 'P') %>%
group_by(drug, compound, alphavalue) %>%
arrange(RMSD_MAP)
df %>%
mutate(nl =   apply(df[c("n.1.", "n.2.", "n.3.", "n.4.")], 1, paste,collapse="")) %>%
filter(ATOM == 'P') %>%
group_by(drug, compound, alphavalue) %>%
arrange(RMSD_MAP) %>% tail()
df %>%
mutate(nl =   apply(df[c("n.1.", "n.2.", "n.3.", "n.4.")], 1, paste,collapse="")) %>%
filter(ATOM == 'P') %>%
group_by(drug, compound, alphavalue) %>%
arrange(RMSD_MAP) %>%
tail(5) %>% # slice((n()-5):n()) %>%
select(drug, compound, alphavalue, nl, RMSD_MAP) %>%
flextable() %>%
theme_box() %>%
merge_v(j = c('drug', 'compound', 'alphavalue'))
df %>%
mutate(nl =   apply(df[c("n.1.", "n.2.", "n.3.", "n.4.")], 1, paste,collapse="")) %>%
filter(ATOM == 'P') %>%
group_by(drug, compound, alphavalue) %>%
arrange(RMSD_MAP) %>%
slice(1:5) %>%
select(drug, compound, alphavalue, nl, RMSD_MAP) %>%
flextable() %>%
theme_box() %>%
merge_v(j = c('drug', 'compound', 'alphavalue'))
df %>%
mutate(nl =   apply(df[c("n.1.", "n.2.", "n.3.", "n.4.")], 1, paste,collapse="")) %>%
filter(ATOM == 'P') %>%
group_by(drug, compound, alphavalue) %>%
arrange(RMSD_MAP) %>%
slice((n()-5):n())
df %>%
mutate(nl =   apply(df[c("n.1.", "n.2.", "n.3.", "n.4.")], 1, paste,collapse="")) %>%
filter(ATOM == 'P') %>%
group_by(drug, compound, alphavalue) %>%
arrange(RMSD_MAP) %>%
slice((n()-2):n())
df %>%
mutate(nl =   apply(df[c("n.1.", "n.2.", "n.3.", "n.4.")], 1, paste,collapse="")) %>%
filter(ATOM == 'P') %>%
group_by(drug, compound, alphavalue) %>%
arrange(RMSD_MAP) %>%
slice(45:50)
df %>%
mutate(nl =   apply(df[c("n.1.", "n.2.", "n.3.", "n.4.")], 1, paste,collapse="")) %>%
filter(ATOM == 'P') %>%
group_by(drug, compound, alphavalue) %>%
arrange(RMSD_MAP) %>%
slice(45:50)
df %>%
mutate(nl =   apply(df[c("n.1.", "n.2.", "n.3.", "n.4.")], 1, paste,collapse="")) %>%
filter(ATOM == 'P') %>%
group_by(drug, compound, alphavalue) %>%
arrange(RMSD_MAP) %>%
slice((n()-5))
df %>%
mutate(nl =   apply(df[c("n.1.", "n.2.", "n.3.", "n.4.")], 1, paste,collapse="")) %>%
filter(ATOM == 'P') %>%
group_by(drug, compound, alphavalue) %>%
arrange(RMSD_MAP) %>%
slice((n()-5)) %>%
select(drug, compound, alphavalue, nl, RMSD_MAP) %>%
flextable() %>%
theme_box() %>%
merge_v(j = c('drug', 'compound', 'alphavalue'))
df %>%
mutate(nl =   apply(df[c("n.1.", "n.2.", "n.3.", "n.4.")], 1, paste,collapse="")) %>%
filter(ATOM == 'P') %>%
group_by(drug, compound, alphavalue) %>%
arrange(RMSD_MAP) %>%
slice(n()-5:n()-5)
df %>%
mutate(nl =   apply(df[c("n.1.", "n.2.", "n.3.", "n.4.")], 1, paste,collapse="")) %>%
filter(ATOM == 'P') %>%
group_by(drug, compound, alphavalue) %>%
arrange(RMSD_MAP) %>%
slice(n()-5:n()-4)
df %>%
mutate(nl =   apply(df[c("n.1.", "n.2.", "n.3.", "n.4.")], 1, paste,collapse="")) %>%
filter(ATOM == 'P') %>%
group_by(drug, compound, alphavalue) %>%
arrange(RMSD_MAP) %>%
slice((n()-5):(n()-4))
df %>%
mutate(nl =   apply(df[c("n.1.", "n.2.", "n.3.", "n.4.")], 1, paste,collapse="")) %>%
filter(ATOM == 'P') %>%
group_by(drug, compound, alphavalue) %>%
arrange(RMSD_MAP) %>%
slice((n()-5):(n())) %>%
select(drug, compound, alphavalue, nl, RMSD_MAP) %>%
flextable() %>%
theme_box() %>%
merge_v(j = c('drug', 'compound', 'alphavalue'))
df %>%
mutate(nl =   apply(df[c("n.1.", "n.2.", "n.3.", "n.4.")], 1, paste,collapse="")) %>%
filter(ATOM == 'P') %>%
group_by(drug, compound, alphavalue) %>%
arrange(RMSD_MAP) %>%
slice((n()-5):(n()-3)) %>%
select(drug, compound, alphavalue, nl, RMSD_MAP) %>%
flextable() %>%
theme_box() %>%
merge_v(j = c('drug', 'compound', 'alphavalue'))
df %>%
mutate(nl =   apply(df[c("n.1.", "n.2.", "n.3.", "n.4.")], 1, paste,collapse="")) %>%
filter(ATOM == 'P') %>%
group_by(drug, compound, alphavalue) %>%
arrange(RMSD_MAP) %>%
slice((n()-5):(n()-2)) %>%
select(drug, compound, alphavalue, nl, RMSD_MAP) %>%
flextable() %>%
theme_box() %>%
merge_v(j = c('drug', 'compound', 'alphavalue'))
df %>%
mutate(nl =   apply(df[c("n.1.", "n.2.", "n.3.", "n.4.")], 1, paste,collapse="")) %>%
filter(ATOM == 'P') %>%
group_by(drug, compound, alphavalue) %>%
arrange(RMSD_MAP) %>%
slice((n()-5):(n()-1)) %>%
select(drug, compound, alphavalue, nl, RMSD_MAP) %>%
flextable() %>%
theme_box() %>%
merge_v(j = c('drug', 'compound', 'alphavalue'))
df %>%
mutate(nl =   apply(df[c("n.1.", "n.2.", "n.3.", "n.4.")], 1, paste,collapse="")) %>%
filter(ATOM == 'P') %>%
group_by(drug, compound, alphavalue) %>%
arrange(RMSD_MAP) %>%
slice((n()-5):(n()-0)) %>%
select(drug, compound, alphavalue, nl, RMSD_MAP) %>%
flextable() %>%
theme_box() %>%
merge_v(j = c('drug', 'compound', 'alphavalue'))
df %>%
mutate(nl =   apply(df[c("n.1.", "n.2.", "n.3.", "n.4.")], 1, paste,collapse="")) %>%
filter(ATOM == 'P') %>%
group_by(drug, compound, alphavalue) %>%
arrange(RMSD_MAP) %>%
slice((n()-5):(n()-1)) %>%
select(drug, compound, alphavalue, nl, RMSD_MAP) %>%
flextable() %>%
theme_box() %>%
merge_v(j = c('drug', 'compound', 'alphavalue'))
df = read.csv('FileMergeOutput/Full_DataFrame_nl_Atoms.csv')
list.files(*bestnl.csv, recursive = TRUE)
list.files("*bestnl.csv", recursive = TRUE)
list.files("*", recursive = TRUE)
list.files(0)
list.files()
list.files("/*", recursive = TRUE)
list.dirs("/*", recursive = TRUE)
list.dirs("*", recursive = TRUE)
list.dirs("", recursive = TRUE)
list.dirs()
list.files(pattern = "*bestnl.csv", recursive = TRUE)
list.files(pattern = "DataFiles/Ph*bestnl.csv", recursive = TRUE)
list.files(pattern = "*DataFiles/Ph*+bestnl.csv", recursive = TRUE)
list.files(pattern = "DataFiles/Ph*+bestnl.csv", recursive = TRUE)
list.files(pattern = "DataFiles\/Ph*bestnl.csv", recursive = TRUE)
list.files(pattern = "DataFiles\/Ph*bestnl.csv", recursive = TRUE)
list.files(pattern = "DataFiles\\/Ph*bestnl.csv", recursive = TRUE)
list.files(pattern = "DataFiles\\Ph*bestnl.csv", recursive = TRUE)
list.files(pattern = "DataFiles*Ph*bestnl.csv", recursive = TRUE)
list.files(pattern = "DataFiles*bestnl.csv", recursive = TRUE)
list.files(pattern = "*bestnl.csv", recursive = TRUE)
list.files(pattern = "DataFiles/*", recursive = TRUE)
18*3
54*3
